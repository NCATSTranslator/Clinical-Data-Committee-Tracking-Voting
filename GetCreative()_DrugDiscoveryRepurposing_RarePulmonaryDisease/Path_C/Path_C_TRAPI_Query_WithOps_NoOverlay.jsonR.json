**Returns error: 2022-09-06T21:24:00.081327 ERROR: [UncaughtARAXiError]   An uncaught error occurred: max() arg is an empty sequence: ['Traceback (most recent call last):\n', ' File "/mnt/data/orangeboard/production/RTX/code/UI/OpenAPI/python-flask-server/openapi_server/controllers/../../../../../ARAX/ARAXQuery/ARAX_query.py", line 747, in execute_processing_plan\n overlay.apply(response, action[\'parameters\'])\n', ' File "/mnt/data/orangeboard/production/RTX/code/UI/OpenAPI/python-flask-server/openapi_server/controllers/../../../../../ARAX/ARAXQuery/ARAX_overlay.py", line 534, in apply\n \'action\'])() # thank you https://stackoverflow.com/questions/11649848/call-methods-by-string\n', ' File "/mnt/data/orangeboard/production/RTX/code/UI/OpenAPI/python-flask-server/openapi_server/controllers/../../../../../ARAX/ARAXQuery/ARAX_overlay.py", line 957, in __fisher_exact_test\n response = FTEST.fisher_exact_test()\n', ' File "/mnt/data/orangeboard/production/RTX/code/UI/OpenAPI/python-flask-server/openapi_server/controllers/../../../../../ARAX/ARAXQuery/Overlay/fisher_exact_test.py", line 283, in fisher_exact_test\n max_index = max([(value, index) for index, value in enumerate(occurrences.values())])[1] # if there are more than one kp having the maximum number of edges, then the last one based on alphabetical order will be chosen.\n', 'ValueError: max() arg is an empty sequence\n']

{
  "workflow": [
    {
      "id": "fill"
    },
    {
      "id": "bind"
    },
    {
      "id": "overlay_compute_ngd",
      "parameters": {
        "virtual_relation_label": "N2",
        "qnode_keys": [
          "n1",
          "n2"
        ]
      }
    },
    {
      "id": "overlay_compute_ngd",
      "parameters": {
        "virtual_relation_label": "N3",
        "qnode_keys": [
          "n2",
          "n3"
        ]
      }
    },
    {
      "id": "complete_results"
    },
    {
      "id": "score"
    }
  ],
  "message": {
    "query_graph": {
      "edges": {
        "e01": {
          "subject": "n0",
          "object": "n1",
          "predicates": [
            "biolink:has_real_world_evidence_of_association_with"
          ]
        },
        "e02": {
          "subject": "n2",
          "object": "n1",
          "predicates": [
            "biolink:gene_associated_with_condition"
          ]
        },
        "e03": {
          "subject": "n3",
          "object": "n2",
          "predicates": [
            "biolink:physically_interacts_with"
          ]
        }
      },
      "nodes": {
        "n0": {
          "ids": [
            "MONDO:0009061"
          ],
          "is_set": false,
          "categories": [
            "biolink:DiseaseOrPhenotypicFeature"
          ],
          "name": "MONDO:0009061"
        },
        "n1": {
          "is_set": false,
          "categories": [
            "biolink:DiseaseOrPhenotypicFeature"
          ]
        },
        "n2": {
          "is_set": false,
          "categories": [
            "biolink:Gene"
          ]
        },
        "n3": {
          "is_set": false,
          "categories": [
            "biolink:ChemicalEntity"
          ]
        }
      }
    }
  }
}
